{"version":3,"sources":["UploadImage.js","App.js","serviceWorker.js","index.js"],"names":["UploadImage","_this","this","react_default","a","createElement","Fragment","onSubmit","e","props","type","name","onChange","handleImageChange","file","className","Component","initialState","toptext","bottomtext","isTopDragging","isBottomDragging","topY","topX","bottomX","bottomY","photos","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getMemes","axios","get","then","res","status","data","memes","setState","openImage","index","image","state","getBase64Image","url","base64","prevState","objectSpread","currentImage","ownImage","modalIsOpen","currentImagebase64","toggle","changeText","event","defineProperty","currentTarget","value","getStateObj","rect","imageRef","getBoundingClientRect","xOffset","clientX","left","yOffset","clientY","top","stateObj","concat","handleMouseDown","document","addEventListener","handleMouseMove","handleMouseUp","removeEventListener","preventDefault","target","files","reader","FileReader","onloadend","result","readAsDataURL","convertSvgToImage","svg","svgRef","svgData","XMLSerializer","serializeToString","canvas","setAttribute","svgSize","width","height","img","btoa","unescape","encodeURIComponent","onload","getContext","drawImage","canvasdata","toDataURL","download","href","body","appendChild","click","uploadOwnImage","asyncToGenerator","regenerator_default","mark","_callee","blob","dataUrl","wrap","_context","prev","next","fetch","r","sent","Promise","resolve","abrupt","stop","_this2","textStyle","fontFamily","fontSize","textTransform","fill","stroke","userSelect","NavbarBrand","onClick","map","key","style","cursor","alt","src","Modal","isOpen","ModalHeader","ModalBody","src_UploadImage","id","ref","el","xmlns","xmlnsXlink","xlinkHref","zIndex","x","y","dominantBaseline","textAnchor","onMouseDown","onMouseUp","FormGroup","Label","for","placeholder","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66a16cfe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass UploadImage extends Component {\n  render() {\n    return (\n      <>\n        <form onSubmit={e => this.props.onSubmit(e)}>\n          <p>Choose and Upload your own Image</p>\n          <input\n            type=\"file\"\n            name=\"myImage\"\n            onChange={e => this.props.handleImageChange(e)}\n          />\n          {this.props.file ? (\n            <button type=\"submit\" className=\"uploadImage\">\n              Upload\n            </button>\n          ) : (\n            \"\"\n          )}\n        </form>\n      </>\n    );\n  }\n}\n\nexport default UploadImage;\n","import React from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  FormGroup,\n  Label,\n  NavbarBrand\n} from \"reactstrap\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport UploadImage from \"./UploadImage\";\nimport \"./App.css\";\nconst initialState = {\n  toptext: \"\",\n  bottomtext: \"\",\n  isTopDragging: false,\n  isBottomDragging: false,\n  topY: \"10%\",\n  topX: \"50%\",\n  bottomX: \"50%\",\n  bottomY: \"90%\",\n  photos: []\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentImage: 0,\n      modalIsOpen: false,\n      ownImage: false,\n      currentImagebase64: null,\n      file: \"\",\n      ...initialState\n    };\n  }\n\n  componentDidMount() {\n    //getting memes\n    this.getMemes();\n  }\n\n  getMemes = () => {\n    axios.get(`https://api.imgflip.com/get_memes`).then(res => {\n      if (res.status === 200) {\n        const photos = res.data.data.memes;\n        this.setState({ photos });\n      }\n    });\n  };\n\n  openImage = index => {\n    const image = this.state.photos[index];\n    this.getBase64Image(image.url).then(base64 => {\n      this.setState(prevState => ({\n        currentImage: index,\n        ownImage: false,\n        modalIsOpen: !prevState.modalIsOpen,\n        currentImagebase64: base64,\n        ...initialState\n      }));\n    });\n  };\n\n  toggle = () => {\n    this.setState(\n      prevState => ({\n        modalIsOpen: !prevState.modalIsOpen,\n        file: \"\"\n      }),\n      () => {\n        this.getMemes();\n      }\n    );\n  };\n\n  changeText = event => {\n    this.setState({\n      [event.currentTarget.name]: event.currentTarget.value\n    });\n  };\n\n  getStateObj = (e, type) => {\n    let rect = this.imageRef.getBoundingClientRect();\n    const xOffset = e.clientX - rect.left;\n    const yOffset = e.clientY - rect.top;\n    let stateObj = {};\n    if (type === \"bottom\") {\n      stateObj = {\n        isBottomDragging: true,\n        isTopDragging: false,\n        bottomX: `${xOffset}px`,\n        bottomY: `${yOffset}px`\n      };\n    } else if (type === \"top\") {\n      stateObj = {\n        isTopDragging: true,\n        isBottomDragging: false,\n        topX: `${xOffset}px`,\n        topY: `${yOffset}px`\n      };\n    }\n    return stateObj;\n  };\n\n  handleMouseDown = (e, type) => {\n    const stateObj = this.getStateObj(e, type);\n    document.addEventListener(\"mousemove\", event =>\n      this.handleMouseMove(event, type)\n    );\n    this.setState({\n      ...stateObj\n    });\n  };\n\n  handleMouseMove = (e, type) => {\n    if (this.state.isTopDragging || this.state.isBottomDragging) {\n      let stateObj = {};\n      if (type === \"bottom\" && this.state.isBottomDragging) {\n        stateObj = this.getStateObj(e, type);\n      } else if (type === \"top\" && this.state.isTopDragging) {\n        stateObj = this.getStateObj(e, type);\n      }\n      this.setState({\n        ...stateObj\n      });\n    }\n  };\n\n  handleMouseUp = event => {\n    document.removeEventListener(\"mousemove\", this.handleMouseMove);\n    this.setState({\n      isTopDragging: false,\n      isBottomDragging: false\n    });\n  };\n\n  /**Get the uploaded Image\n   * and append it in base 64\n   */\n  handleImageChange = e => {\n    e.preventDefault();\n    this.setState({\n      file: e.target.files[0]\n    });\n  };\n  //function to handle image cropper\n  onSubmit = e => {\n    e.preventDefault();\n    let reader = new FileReader();\n    let file = this.state.file;\n    reader.onloadend = () => {\n      this.setState({\n        file: file,\n        currentImagebase64: reader.result,\n        ownImage: false\n      });\n    };\n    reader.readAsDataURL(file);\n  };\n\n  convertSvgToImage = () => {\n    const svg = this.svgRef;\n    let svgData = new XMLSerializer().serializeToString(svg);\n    const canvas = document.createElement(\"canvas\");\n    canvas.setAttribute(\"id\", \"canvas\");\n    const svgSize = svg.getBoundingClientRect();\n    canvas.width = svgSize.width;\n    canvas.height = svgSize.height;\n    const img = document.createElement(\"img\");\n    img.setAttribute(\n      \"src\",\n      \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svgData)))\n    );\n    img.onload = function() {\n      canvas.getContext(\"2d\").drawImage(img, 0, 0);\n      const canvasdata = canvas.toDataURL(\"image/png\");\n      const a = document.createElement(\"a\");\n      a.download = \"meme.png\";\n      a.href = canvasdata;\n      document.body.appendChild(a);\n      a.click();\n    };\n  };\n\n  getBase64Image(img) {\n    return (async function() {\n      let blob = await fetch(img).then(r => r.blob());\n      let dataUrl = await new Promise(resolve => {\n        let reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.readAsDataURL(blob);\n      });\n      return dataUrl;\n    })();\n  }\n  /** when click Upload own image\n   * Pop-up modal would open\n   */\n  uploadOwnImage = () => {\n    this.setState({\n      currentImagebase64: null,\n      modalIsOpen: true,\n      ownImage: true,\n      toptext: \"\",\n      bottomtext: \"\"\n    });\n  };\n\n  render() {\n    var textStyle = {\n      fontFamily: \"Impact\",\n      fontSize: \"50px\",\n      textTransform: \"uppercase\",\n      fill: \"#FFF\",\n      stroke: \"#000\",\n      userSelect: \"none\"\n    };\n    return (\n      <div>\n        <div className=\"main-content\">\n          <div className=\"sidebar\">\n            <NavbarBrand href=\"/\">\n              <h1>Meme Factory</h1>\n            </NavbarBrand>\n            <h3>This is a fun project for creating memes. Built with React.</h3>\n            <h3>Here is the List of Meme`s Avaliable to Edit</h3>\n            <button\n              className=\"ownUploadButton\"\n              onClick={() => this.uploadOwnImage()}\n            >\n              Create Your Own\n            </button>\n          </div>\n          <div className=\"content\">\n            {this.state.photos &&\n              this.state.photos.map((image, index) => (\n                <div className=\"image-holder\" key={index}>\n                  <span className=\"meme-top-caption\">Top text</span>\n                  <img\n                    style={{\n                      width: \"100%\",\n                      cursor: \"pointer\",\n                      height: \"100%\"\n                    }}\n                    alt={index}\n                    src={image.url}\n                    onClick={() => this.openImage(index)}\n                  />\n                  <span className=\"meme-bottom-caption\">Bottom text</span>\n                </div>\n              ))}\n          </div>\n        </div>\n        <Modal className=\"meme-gen-modal\" isOpen={this.state.modalIsOpen}>\n          <ModalHeader toggle={this.toggle}>Create a Meme</ModalHeader>\n          <ModalBody>\n            {this.state.ownImage && (\n              <UploadImage\n                onSubmit={e => this.onSubmit(e)}\n                handleImageChange={e => this.handleImageChange(e)}\n                file={this.state.file}\n              />\n            )}\n            <svg\n              width={\"600px\"}\n              id=\"svg_ref\"\n              height={\"600px\"}\n              ref={el => {\n                this.svgRef = el;\n              }}\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            >\n              <image\n                ref={el => {\n                  this.imageRef = el;\n                }}\n                xlinkHref={this.state.currentImagebase64}\n                height={\"600px\"}\n                width={\"600px\"}\n              />\n              <text\n                style={{\n                  ...textStyle,\n                  zIndex: this.state.isTopDragging ? 4 : 1\n                }}\n                x={this.state.topX}\n                y={this.state.topY}\n                dominantBaseline=\"middle\"\n                textAnchor=\"middle\"\n                onMouseDown={event => this.handleMouseDown(event, \"top\")}\n                onMouseUp={event => this.handleMouseUp(event, \"top\")}\n              >\n                {this.state.toptext}\n              </text>\n              <text\n                style={textStyle}\n                dominantBaseline=\"middle\"\n                textAnchor=\"middle\"\n                x={this.state.bottomX}\n                y={this.state.bottomY}\n                onMouseDown={event => this.handleMouseDown(event, \"bottom\")}\n                onMouseUp={event => this.handleMouseUp(event, \"bottom\")}\n              >\n                {this.state.bottomtext}\n              </text>\n            </svg>\n            <div className=\"meme-form\">\n              <FormGroup>\n                <Label for=\"toptext\">Top Text</Label>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"toptext\"\n                  id=\"toptext\"\n                  placeholder=\"Add text to the top\"\n                  onChange={this.changeText}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"bottomtext\">Bottom Text</Label>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"bottomtext\"\n                  id=\"bottomtext\"\n                  placeholder=\"Add text to the bottom\"\n                  onChange={this.changeText}\n                />\n              </FormGroup>\n              <button\n                onClick={() => this.convertSvgToImage()}\n                className=\"btn btn-primary\"\n              >\n                Meme It!\n              </button>\n            </div>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}